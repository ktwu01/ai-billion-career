import React, { useState, useEffect } from 'react'
import { BarChart3, TrendingUp, DollarSign, Users, Calendar, Download } from 'lucide-react'
import { SkillsRadarChart, ProgressChart, DashboardMetrics, type SkillData, type ProgressData, type MetricData } from '../components/charts'
import { useAuth } from '../contexts/AuthContext'
import { supabase } from '../lib/supabase'

export function AnalyticsPage() {
  const { user } = useAuth()
  const [activeTab, setActiveTab] = useState('overview')
  const [timeRange, setTimeRange] = useState('6months')
  const [loading, setLoading] = useState(true)
  const [skillsData, setSkillsData] = useState<SkillData[]>([])
  const [progressData, setProgressData] = useState<ProgressData[]>([])
  const [kpiMetrics, setKpiMetrics] = useState<MetricData[]>([])

  useEffect(() => {
    if (user) {
      fetchAnalyticsData()
    }
  }, [user, timeRange])

  const fetchAnalyticsData = async () => {
    try {
      setLoading(true)
      
      // Fetch user data for analytics
      const { data: goals } = await supabase
        .from('career_goals')
        .select('*')
        .eq('user_id', user?.id)
      
      const { data: assessments } = await supabase
        .from('skill_assessments')
        .select('*')
        .eq('user_id', user?.id)
      
      const { data: profile } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', user?.id)
        .maybeSingle()
      
      // Calculate KPI metrics
      const totalGoals = goals?.length || 0
      const completedGoals = goals?.filter(g => g.status === 'completed').length || 0
      const goalCompletion = totalGoals > 0 ? Math.round((completedGoals / totalGoals) * 100) : 0
      
      // Calculate skill improvement (simplified)
      let skillImprovement = 32 // Default
      if (assessments && assessments.length > 0) {
        const avgCurrent = assessments.reduce((sum, a) => sum + a.current_level, 0) / assessments.length
        const avgTarget = assessments.reduce((sum, a) => sum + (a.target_level || 8), 0) / assessments.length
        skillImprovement = Math.round(((avgCurrent / avgTarget) * 100) - 68) // Simulated improvement
      }
      
      // Build skills data
      const skillsMap = new Map<string, { total: number, count: number }>()
      if (assessments && assessments.length > 0) {
        assessments.forEach(assessment => {
          const category = assessment.category || assessment.dimension
          if (!skillsMap.has(category)) {
            skillsMap.set(category, { total: 0, count: 0 })
          }
          const existing = skillsMap.get(category)!
          existing.total += assessment.current_level * 10
          existing.count += 1
        })
      }
      
      const skillsData: SkillData[] = Array.from(skillsMap.entries()).map(([category, data]) => ({
        category,
        level: Math.round(data.total / data.count)
      }))
      
      const progressData: ProgressData[] = skillsData.map(skill => ({
        category: skill.category,
        value: skill.level,
        target: 80,
        maxValue: 100
      }))
      
      // Use fallback data if no real data
      if (skillsData.length === 0) {
        const fallback = [
          { category: 'Technical Skills', level: 85 },
          { category: 'Project Management', level: 72 },
          { category: 'Leadership', level: 68 },
          { category: 'Business Acumen', level: 58 }
        ]
        setSkillsData(fallback)
        setProgressData(fallback.map(s => ({ category: s.category, value: s.level, target: 80, maxValue: 100 })))
      } else {
        setSkillsData(skillsData)
        setProgressData(progressData)
      }
      
      // Build KPI metrics
      const kpiMetrics: MetricData[] = [
        {
          title: 'Salary Growth',
          value: 45,
          format: 'percentage',
          trend: 'up'
        },
        {
          title: 'Skill Improvement',
          value: skillImprovement,
          format: 'percentage',
          trend: skillImprovement > 30 ? 'up' : 'neutral'
        },
        {
          title: 'Goal Completion',
          value: goalCompletion,
          format: 'percentage',
          trend: goalCompletion > 70 ? 'up' : 'neutral'
        },
        {
          title: 'Market Competitiveness',
          value: 85,
          format: 'percentage',
          trend: 'up'
        }
      ]
      
      setKpiMetrics(kpiMetrics)
      
    } catch (error) {
      console.error('Error fetching analytics data:', error)
      // Set fallback data
      setSkillsData([
        { category: 'Technical Skills', level: 85 },
        { category: 'Project Management', level: 72 },
        { category: 'Leadership', level: 68 },
        { category: 'Business Acumen', level: 58 }
      ])
      setKpiMetrics([
        { title: 'Salary Growth', value: 45, format: 'percentage', trend: 'up' },
        { title: 'Skill Improvement', value: 32, format: 'percentage', trend: 'up' },
        { title: 'Goal Completion', value: 78, format: 'percentage', trend: 'up' },
        { title: 'Market Competitiveness', value: 85, format: 'percentage', trend: 'up' }
      ])
    } finally {
      setLoading(false)
    }
  }

  const reportSections = [
    {
      id: 'salary',
      title: 'Salary Analysis Report',
      description: 'Industry salary level comparison and growth trend analysis',
      charts: ['/charts/salary_comparison.png', '/charts/top_companies_salary_heatmap.png'],
      insights: [
        'Your salary exceeds industry average by 15%',
        'AI sector salary growth rate reaches 25%/year',
        'Top tech companies offer higher compensation packages'
      ]
    },
    {
      id: 'career',
      title: 'Career Development Analysis',
      description: 'Career path and development opportunities analysis',
      charts: ['/charts/career_path_timeline.png', '/charts/career_milestone_progress.png'],
      insights: [
        'Technical expert path has higher salary ceiling',
        'Management path offers broader influence',
        'Cross-functional capabilities are future competitive advantages'
      ]
    },
    {
      id: 'skills',
      title: 'Skill Competitiveness Analysis',
      description: 'Skill level assessment and improvement recommendations',
      charts: ['/charts/skills_radar_chart.png', '/charts/skill_progress_analysis.png'],
      insights: [
        'You excel in technical capabilities',
        'Leadership and business acumen have room for improvement',
        'Continuous learning is key to maintaining competitiveness'
      ]
    },
    {
      id: 'learning',
      title: 'Learning Growth Analysis',
      description: 'Learning effectiveness and growth trajectory analysis',
      charts: ['/charts/learning_growth_analysis.png', '/charts/overall_progress_radar.png'],
      insights: [
        'Average monthly learning time reaches 40 hours',
        'Practical projects significantly improve skill levels',
        'Systematic learning is more effective than fragmented learning'
      ]
    },
    {
      id: 'industry',
      title: 'Industry Trends Analysis',
      description: 'AI industry development trends and opportunities analysis',
      charts: ['/charts/investment_trends.png', '/charts/startup_exits_analysis.png'],
      insights: [
        'AI industry investment enthusiasm continues to rise',
        'Startup exit count hits record high',
        'Talent shortage will persist for 3-5 years'
      ]
    },
    {
      id: 'network',
      title: 'Network Analysis',
      description: 'Social network and influence analysis',
      charts: ['/charts/network_innovation_analysis.png'],
      insights: [
        'Connections with top experts significantly impact career development',
        'Cross-industry networks provide more opportunities',
        'Online influence requires continuous cultivation'
      ]
    }
  ]

  const currentReport = reportSections.find(section => section.id === activeTab) || reportSections[0]

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-cyan-600 to-blue-600 rounded-2xl p-8 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">Data Analytics Report</h1>
            <p className="text-xl opacity-90">
              Deep insights into your career development data, scientific decision guidance
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <select
              value={timeRange}
              onChange={(e) => setTimeRange(e.target.value)}
              className="bg-white/20 text-white border border-white/30 rounded-lg px-3 py-2"
            >
              <option value="3months">3 Months</option>
              <option value="6months">6 Months</option>
              <option value="1year">1 Year</option>
              <option value="all">All Time</option>
            </select>
            <button className="bg-white text-cyan-600 px-4 py-2 rounded-lg hover:bg-gray-50 font-medium flex items-center space-x-2">
              <Download className="h-4 w-4" />
              <span>Export Report</span>
            </button>
          </div>
        </div>

        {/* KPI Cards */}
        <div className="mt-6">
          <DashboardMetrics 
            metrics={kpiMetrics}
            cols={4}
            width={800}
            height={200}
          />
        </div>
      </div>

      {/* Report Navigation */}
      <div className="bg-gray-800 rounded-xl shadow-sm border border-gray-700">
        <div className="border-b border-gray-700">
          <nav className="flex space-x-8 px-6 overflow-x-auto">
            {reportSections.map((section) => (
              <button
                key={section.id}
                onClick={() => setActiveTab(section.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${
                  activeTab === section.id
                    ? 'border-cyan-500 text-cyan-400'
                    : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-600'
                }`}
              >
                {section.title}
              </button>
            ))}
          </nav>
        </div>

        <div className="p-6">
          {/* Current Report Section */}
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">{currentReport.title}</h2>
              <p className="text-gray-600">{currentReport.description}</p>
            </div>

            {/* Charts Display */}
            {activeTab === 'skills' ? (
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-gray-800 rounded-lg p-6">
                  <h4 className="text-lg font-semibold text-gray-200 mb-4">Skills Radar Chart</h4>
                  <div className="h-80">
                    <SkillsRadarChart 
                      skills={skillsData}
                      title=""
                      width={400}
                      height={300}
                      showGrid={true}
                    />
                  </div>
                </div>
                <div className="bg-gray-800 rounded-lg p-6">
                  <h4 className="text-lg font-semibold text-gray-200 mb-4">Skills Progress Analysis</h4>
                  <div className="h-80">
                    <ProgressChart 
                      data={progressData}
                      type="bar"
                      title=""
                      width={400}
                      height={300}
                      orientation="horizontal"
                    />
                  </div>
                </div>
              </div>
            ) : (
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {currentReport.charts.map((chart, index) => (
                  <div key={index} className="bg-gray-50 rounded-lg p-6">
                    <img 
                      src={chart} 
                      alt={`Analysis Chart ${index + 1}`}
                      className="w-full h-64 object-contain rounded-lg"
                    />
                  </div>
                ))}
              </div>
            )}

            {/* Insights */}
            <div className="bg-blue-50 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-blue-900 mb-4 flex items-center">
                <TrendingUp className="h-5 w-5 mr-2" />
                Key Insights
              </h3>
              <ul className="space-y-2">
                {currentReport.insights.map((insight, index) => (
                  <li key={index} className="flex items-start space-x-2 text-blue-800">
                    <div className="w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0"></div>
                    <span>{insight}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Action Recommendations */}
            <div className="bg-green-50 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-green-900 mb-4">Action Recommendations</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {activeTab === 'salary' && [
                  'Enhance technical depth, transition to senior engineer',
                  'Consider cross-domain capability development',
                  'Now might be a good time for job changes',
                  'Understand competitor company salary structures'
                ].map((action, index) => (
                  <div key={index} className="flex items-center space-x-2 text-green-800">
                    <BarChart3 className="h-4 w-4 flex-shrink-0" />
                    <span className="text-sm">{action}</span>
                  </div>
                ))}
                
                {activeTab === 'career' && [
                  'Develop 3-5 year career development plan',
                  'Participate in high-visibility projects',
                  'Build personal brand and influence',
                  'Find professional mentors and resources'
                ].map((action, index) => (
                  <div key={index} className="flex items-center space-x-2 text-green-800">
                    <BarChart3 className="h-4 w-4 flex-shrink-0" />
                    <span className="text-sm">{action}</span>
                  </div>
                ))}
                
                {activeTab === 'skills' && [
                  'Focus on improving leadership and communication skills',
                  'Learn latest AI/ML technologies',
                  'Contribute to open source projects',
                  'Obtain relevant professional certifications'
                ].map((action, index) => (
                  <div key={index} className="flex items-center space-x-2 text-green-800">
                    <BarChart3 className="h-4 w-4 flex-shrink-0" />
                    <span className="text-sm">{action}</span>
                  </div>
                ))}
                
                {activeTab === 'learning' && [
                  'Maintain learning pace, at least 10 hours per week',
                  'Apply knowledge through practical projects',
                  'Join study groups or communities',
                  'Regularly summarize and share learning achievements'
                ].map((action, index) => (
                  <div key={index} className="flex items-center space-x-2 text-green-800">
                    <BarChart3 className="h-4 w-4 flex-shrink-0" />
                    <span className="text-sm">{action}</span>
                  </div>
                ))}
                
                {activeTab === 'industry' && [
                  'Follow emerging technologies and trends',
                  'Consider joining or founding a startup',
                  'Build investor and entrepreneur networks',
                  'Participate in industry conferences and exhibitions'
                ].map((action, index) => (
                  <div key={index} className="flex items-center space-x-2 text-green-800">
                    <BarChart3 className="h-4 w-4 flex-shrink-0" />
                    <span className="text-sm">{action}</span>
                  </div>
                ))}
                
                {activeTab === 'network' && [
                  'Expand social media influence',
                  'Attend more industry events',
                  'Actively help others build connections',
                  'Regularly maintain and activate network relationships'
                ].map((action, index) => (
                  <div key={index} className="flex items-center space-x-2 text-green-800">
                    <BarChart3 className="h-4 w-4 flex-shrink-0" />
                    <span className="text-sm">{action}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Comprehensive Dashboard Preview */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">Comprehensive Dashboard</h2>
        <div className="text-center">
          <img 
            src="/charts/comprehensive_dashboard.png" 
            alt="Comprehensive Dashboard" 
            className="max-w-full h-96 object-contain rounded-lg mx-auto"
          />
          <p className="mt-4 text-gray-600">
            View all your career development data and analysis results in one place
          </p>
        </div>
      </div>
    </div>
  )
}